@Entity //Database table과 1:1로 매핑되는 객체
@SequenceGenerator(
        name="USER_SEQ_GEN", //시퀀스 제너레이터 이름
        sequenceName="USER_SEQ", //시퀀스 이름
        initialValue=3, //시작값
        allocationSize=1 //메모리를 통해 할당할 범위 사이즈
        )
@Table(name = "users") //객체와 매핑되는 데이터베이스의 테이블명 지정
@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class User {
 
   @JsonIgnore //서버에서 json 응답을 생성할 때 해당 필드는 ignore
   @Id //해당 필드가 primary key
   @Column(name = "user_id") //매핑되는 database column의 정보 정의
   @GeneratedValue(strategy = GenerationType.SEQUENCE, generator="USER_SEQ_GEN")
   //@GeneratedValue(strategy = GenerationType.AUTO)
   private Long userId;
 
   @Column(name = "username", length = 50, unique = true)
   private String username;
 
   @JsonIgnore //password ignore
   @Column(name = "password", length = 100)
   private String password;
 
   @Column(name = "nickname", length = 50)
   private String nickname;
 
   @JsonIgnore
   @Column(name = "activated")
   private boolean activated;
 
   @ManyToMany //다 대 다 관계 
   @JoinTable( //user, authority 테이블의 다대다 --> 일대다, 다대일 관계의 조인 테이블로 정의
      name = "user_authority",
      joinColumns = {@JoinColumn(name = "user_id", referencedColumnName = "user_id")},
      inverseJoinColumns = {@JoinColumn(name = "authority_name", referencedColumnName = "authority_name")})
   private Set<Authority> authorities;
}